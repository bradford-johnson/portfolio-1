[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "ggmap\n\n\nmap\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2022\n\n\nBradford Johnson\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nweb scraping\n\n\nrvest\n\n\n\n\n\n\n\n\n\n\n\nNov 13, 2022\n\n\nBradford Johnson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bradford Johnson",
    "section": "",
    "text": "Data analyst and recent graduate of the Thinkful Data Analytics program. Proficiency with dashboarding, performance tracking, Pandas, Excel, SQL, Tableau, and Python to transform data into meaningful and easily understood visualizations and presentations. Experience in sociology provides an advantage to storytelling with data.\n\n\n\n\n\nThinkful | Data Analytics Bootcamp | June 2022 - December 2022\nWinthrop University | B.A. in Sociology | August 2017 - December 2021"
  },
  {
    "objectID": "posts/ggmap/index.html",
    "href": "posts/ggmap/index.html",
    "title": "Making maps with ggmap",
    "section": "",
    "text": "The ggmap package makes life easier when you are trying to visualize geographic data.\nIt connects the ggplot2 framework with mapping services allowing the user to create powerful and insightful maps.\n\n\n\n\nI will be working with crime data from the City of Atlanta Police Department. For this analysis I will use the 2021 crime data and I want to visualize the reported homicides.\n\n\n\nI will be using the tidyverse, ggmap, ggdensity and geomtextpath packages. Below you can view the documentation for the respective package.\n\n\n\nPackage\nDocumentation\n\n\n\n\ntidyverse\ntidyverse.tidyverse.org\n\n\nggmap\nwww.rdocumentation.org/packages/ggmap\n\n\nggdensity\njamesotto852.github.io/ggdensity\n\n\nggtextpath\nwww.rdocumentation.org/packages/geomtextpath\n\n\n\n\n\nIf you are missing any of these package then use this code to install them.\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggmap\")\ninstall.packages(\"ggdensity\")\ninstall.packages(\"geomtextpath\")\nOnce you have everything installed load the packages.\n\nYou have to load the packages each time you use them, but you only have to install them once\n\n\nlibrary(tidyverse)\nlibrary(ggmap)\nlibrary(ggdensity)\nlibrary(geomtextpath)\n\n\n\n\n\n\n\n\nClick here to see all of the available Atlanta crime data\nClick here to download the 2021 Atlanta crime data\n\n\nOnce you have the data you want to use then load it into R.\n\nI downloaded the 2021 Atlanta crime data, cleaned the column names, filtered for only homicide reports, and only kept these columns:\n- offense_id\n- lat\n- long\n\n\n\nMy data is in my working directory named ‘atl-homicides-2021.csv’, I can use the read_csv() function from the readr package (included in tidyverse) and turn the .csv file into a data frame within R. I will name this data frame cobra_df.\n\ncobra_df <- read_csv(\"atl-homicides-2021.csv\")\n\n\n\nNext I will create a simple map that shows the general location of each reported homicide. Each reported homicide location will be marked with a red circle.\n\nmap_1 <- qmplot(long, lat, data = cobra_df,\n                source = \"osm\", maptype = \"roadmap\",\n                color = I(\"red\"))\n\nmap_1\n\n\n\n\n\n\nNow I want to look deeper and create a 2D density plot, using the geom_hdr() function from the ggdensity package allows me to perform 2D density estimation. The geomtextpath package creates the labels, and in this case I am creating labels on the map that correspond to the probabilities for a reported homicide within the respective contoured region.\n\nmap_2 <- qmplot(long, lat, data = cobra_df, geom = \"blank\", \n       zoom = 14, source = \"osm\", maptype = \"roadmap\") +\n  geom_hdr(aes(fill = stat(probs)), alpha = .3) +\n  geom_labeldensity2d(aes(long, lat, level = stat(probs)), stat = \"hdr_lines\") +\n  scale_fill_viridis_d(option = \"A\") +\n  theme(legend.position = \"none\")\n\nmap_2\n\n\n\n\n\n\n\n\n\nWhen I was new to R my favorite learning activity was to try and create crime “heatmaps” with Atlanta’s crime data. Now over 1 year later revisiting this was a good change of pace. I was able to learn about these packages and figure out how to actually extract insights from geographic data (rather than just making cool looking maps).\n\n\n\n\n\n\nFor some insight on how my mapping skills have changed over time\n\nHere is a picture of the first map I created in R on May 5th, 2021.\n\nThis map took many hours to make, and shows Atlanta’s reported homicides from 2009-2020 including some of 2021’s preliminary data.\n\n\n\n\n\nReach out to me if you have any feedback, questions, or suggestions! I am open to collaborating with others on projects and expanding my network! Until next post!"
  },
  {
    "objectID": "posts/rvest/index.html",
    "href": "posts/rvest/index.html",
    "title": "Web Scraping with rvest",
    "section": "",
    "text": "Using the rvest package you can get the data you need from webpages for analysis.\nBelow I will show a simple script using the rvest and tidyverse packages that can scrape us some data from Wikipedia about the Seinfeld original television soundtrack.\nFirst you will need to install and load these packages, if you already have any of these packages then you just need to load them."
  },
  {
    "objectID": "posts/rvest/index.html#install-and-load-packages",
    "href": "posts/rvest/index.html#install-and-load-packages",
    "title": "Web Scraping with rvest",
    "section": "Install and load packages",
    "text": "Install and load packages\n# install packages\n    install.packages(\"tidyverse\")\n    install.packages(\"rvest\")\n\n# load packages\n    library(tidyverse)\n    library(rvest)\n\nTo see the documentation for rvest click the hex image"
  },
  {
    "objectID": "posts/rvest/index.html#setting-the-parameters",
    "href": "posts/rvest/index.html#setting-the-parameters",
    "title": "Web Scraping with rvest",
    "section": "Setting the parameters",
    "text": "Setting the parameters\nNext you will set up the parameters so rvest knows where to get the data from. First I create the object link with the website’s link. After I can use this object as an argument for the read_html() function. This function is then assigned to the object page.\n# link to get data from\n    link <- \"https://en.wikipedia.org/wiki/Seinfeld\"\n\n# read webpage at the above link\n    page <- read_html(link)\nFor each of the columns you want to create you will need to repeat the following steps:\n\n\nCreate object with the column’s name\nUse selector gadget to get the html_nodes for this column\nRepeat the below code as shown changing each object’s name to it’s respective column name, and html_nodes\n\n\nThe html_nodes can be found using the browser extension SelectorGadget found here. Using this extension you can highlight what you want to web scrape and copy/paste the html nodes from SelectorGadget.\nFor my 3 columns: title, episodes, and length this is how the code looks:\n# scrape title\n    title <- page %>%\n        html_nodes(\".tracklist td:nth-child(2)\") %>%\n        html_text()\n\n# scrape episodes\n    episodes <- page %>%\n        html_nodes(\".tracklist td:nth-child(3)\") %>%\n        html_text()\n\n# scrape length\n    length <- page %>%\n        html_nodes(\".tracklist-length\") %>%\n        html_text()"
  },
  {
    "objectID": "posts/rvest/index.html#creating-the-data-frame",
    "href": "posts/rvest/index.html#creating-the-data-frame",
    "title": "Web Scraping with rvest",
    "section": "Creating the data frame",
    "text": "Creating the data frame\nAfter getting all the data you will want to put it into a data frame to work with it, to do this use the data.frame() function. Below you will see how I am creating the data frame with the previously made objects.\nI am also using the gsub() function to clean up the title and episodes columns, here I am removing quotes. Because the function takes quotes in it’s first two arguments gsub(\"...\", \"...\", x) a backslash, “\\” is used to tell the function to ignore the next symbol allowing it through. In this case not supplying the backslash would cause an error as the argument within the quotation marks is a quotation mark causing the function break.\n# create df\n    df <- data.frame(title, episodes, length)\n\n# remove quotes from data\n    df$title <- gsub(\"\\\"\", \"\", df$title)\n    df$episodes <- gsub(\"\\\"\", \"\", df$episodes)\nNow lets see the first 6 rows of our new data frame that we crafted using rvest.\n\n# view top 6 records\n    head(df)\n\n                 title              episodes length\n1       Seinfeld Theme                         0:52\n2       Seinfeld Theme The Highlights of 100   0:40\n3       Seinfeld Theme         The Chronicle   0:33\n4 The Jerry Show Theme     The Pilot, Part 2   0:50\n5    Kramer's Pimpwalk        The Wig Master   0:53\n6    Jerry the Mailman      The Andrea Doria   0:35"
  }
]