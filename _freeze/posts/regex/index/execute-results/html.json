{
  "hash": "cf443b8f43a63c980b509644b848db79",
  "result": {
    "markdown": "---\ntitle: \"Using regular expressions to deal with dirty data in `R`\"\ndate: \"2022-11-24\"\ncategories: [core essential, regex]\nimage: \"oliver-hale-oTvU7Zmteic-unsplash.jpg\"\ncode-fold: false\n---\n\n\n::: column-page\n## How to start cleaning data by using regular expressions\n\nCheck out how to use regular expressions to clean up a realistic and dirty customer dataset.\n\nDirty data can seem extremely overwhelming at times, but breaking it down into cleaning \"stages\" is how I approach the task.\n\n### Packages\n\nI will be using the [`tidyverse`](https://tidyverse.tidyverse.org/), [`janitor`](https://sfirke.github.io/janitor/) and [`skimr`](https://docs.ropensci.org/skimr/index.html) packages; you can install and load these packages with the following code:\n\n-   Install packages\n\n    ``` r\n    install.packages(\"tidyverse\")\n    install.packages(\"janitor\")\n    install.packages(\"skimr\")\n    ```\n\n-   Load packages\n\n    ``` r\n    library(tidyverse)\n    library(janitor)\n    library(skimr)\n    ```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  customers <- read_csv(\"customers-dirty.csv\")\n  \n  head(customers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  customer                                         main_phone    main_email   \n  <chr>                                            <chr>         <chr>        \n1 *JESUS SANCHEZ                                   9670-342-6100 <NA>         \n2 *JESUS SANCHEZ:17900 CR 5                        9670-342-6100 <NA>         \n3 1888 INDUSTRIAL SERVICES                         970-702-7610  AP@1888IS.COM\n4 1888 INDUSTRIAL SERVICES:WELLS RANCH TO REPUBLIC 970-702-7610  AP@1888IS.COM\n5 2 RINGS TRUCKING                                 406-289-0901  <NA>         \n6 2 RINGS TRUCKING:35094 CR 51, EATON              406-289-0901  <NA>         \n```\n:::\n\n```{.r .cell-code}\n  customers %>%\n    skim()\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |15135      |\n|Number of columns        |3          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|character                |3          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|customer      |         0|          1.00|   3|  99|     0|    15135|          0|\n|main_phone    |      2000|          0.87|  10|  43|     0|     3272|          0|\n|main_email    |      2243|          0.85|   3|  99|     0|     2707|          0|\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}