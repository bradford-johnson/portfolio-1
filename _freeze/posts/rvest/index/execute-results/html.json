{
  "hash": "10fae75456eafffd356f2351f466668e",
  "result": {
    "markdown": "---\ntitle: \"Web scraping with `rvest`\"\nauthor: \"Bradford Johnson\"\ndate: \"2022-11-13\"\nimage: \"josh-berendes-2zcemW2Oy8Y-unsplash.jpg\"\ncategories: [web scraping, rvest]\n---\n\n\n## **How to web scrape with `rvest`**\n\nUsing the `rvest` package you can get the data you need from webpages for analysis.\n\nBelow I will show a simple script using the `rvest` and `tidyverse` packages that can scrape us some data from Wikipedia about the Seinfeld original television soundtrack.\n\nFirst you will need to install and load these packages, if you already have any of these packages then you just need to load them.\n\n## Install and load packages\n\n``` r\n# install packages\n    install.packages(\"tidyverse\")\n    install.packages(\"rvest\")\n\n# load packages\n    library(tidyverse)\n    library(rvest)\n```\n\n\n\n\n\n> *To see the documentation for `rvest`* click the hex image\n>\n> [![](https://github.com/rstudio/hex-stickers/blob/master/thumbs/rvest.png?raw=true){width=\"200\"}](https://rvest.tidyverse.org/)\n\n## Setting the parameters\n\nNext you will set up the parameters so `rvest` knows where to get the data from. First I create the object `link` with the website's link. After I can use this object as an argument for the `read_html()` function. This function is then assigned to the object `page`.\n\n``` r\n# link to get data from\n    link <- \"https://en.wikipedia.org/wiki/Seinfeld\"\n\n# read webpage at the above link\n    page <- read_html(link)\n```\n\nFor each of the columns you want to create you will need to repeat the following steps:\n\n> -   Create object with the column's name\n> -   Use selector gadget to get the `html_nodes` for this column\n> -   Repeat the below code as shown changing each object's name to it's respective column name, and `html_nodes`\n\nThe `html_nodes` can be found using the browser extension `SelectorGadget` found [here](https://chrome.google.com/webstore/detail/selectorgadget/mhjhnkcfbdhnjickkkdbjoemdmbfginb). Using this extension you can highlight what you want to web scrape and copy/paste the html nodes from `SelectorGadget`.\n\nFor my 3 columns: *title*, *episodes*, and *length* this is how the code looks:\n\n``` r\n# scrape title\n    title <- page %>%\n        html_nodes(\".tracklist td:nth-child(2)\") %>%\n        html_text()\n\n# scrape episodes\n    episodes <- page %>%\n        html_nodes(\".tracklist td:nth-child(3)\") %>%\n        html_text()\n\n# scrape length\n    length <- page %>%\n        html_nodes(\".tracklist-length\") %>%\n        html_text()\n```\n\n\n\n\n\n## Creating the data frame\n\nAfter getting all the data you will want to put it into a data frame to work with it, to do this use the `data.frame()` function. Below you will see how I am creating the data frame with the previously made objects.\n\nI am also using the `gsub()` function to clean up the *title* and *episodes* columns, here I am removing quotes. Because the function takes quotes in it's first two arguments `gsub(\"...\", \"...\", x)` a backslash, \"`\\`\" is used to tell the function to ignore the next symbol allowing it through. In this case not supplying the backslash would cause an error as the argument within the quotation marks is a quotation mark causing the function break.\n\n``` r\n# create df\n    df <- data.frame(title, episodes, length)\n\n# remove quotes from data\n    df$title <- gsub(\"\\\"\", \"\", df$title)\n    df$episodes <- gsub(\"\\\"\", \"\", df$episodes)\n```\n\n\n\n\n\nNow lets see the first 6 rows of our new data frame that we crafted using `rvest`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# view top 6 records\n    head(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 title              episodes length\n1       Seinfeld Theme                     Â    0:52\n2       Seinfeld Theme The Highlights of 100   0:40\n3       Seinfeld Theme         The Chronicle   0:33\n4 The Jerry Show Theme     The Pilot, Part 2   0:50\n5    Kramer's Pimpwalk        The Wig Master   0:53\n6    Jerry the Mailman      The Andrea Doria   0:35\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}